// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview A jewelry recommendation AI agent.
 *
 * - getJewelryRecommendation - A function that handles the jewelry recommendation process.
 * - JewelryRecommendationInput - The input type for the getJewelryRecommendation function.
 * - JewelryRecommendationOutput - The return type for the getJewelryRecommendation function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const JewelryRecommendationInputSchema = z.object({
  userPreferences: z
    .string()
    .describe('The user\'s stated preferences for jewelry.'),
  browsingHistory: z
    .string()
    .describe(
      'A description of the user\'s browsing history on the jewelry website.'
    ),
  colorPalette: z
    .string()
    .describe(
      'The user\'s preferred color palette, as a comma separated list of colors.'
    ),
  previouslyViewedItems: z
    .string()
    .describe('A description of the items the user has previously viewed.'),
});
export type JewelryRecommendationInput = z.infer<
  typeof JewelryRecommendationInputSchema
>;

const JewelryRecommendationOutputSchema = z.object({
  recommendation: z
    .string()
    .describe(
      'A detailed description of jewelry recommendations based on the user\'s preferences and browsing history.'
    ),
});
export type JewelryRecommendationOutput = z.infer<
  typeof JewelryRecommendationOutputSchema
>;

export async function getJewelryRecommendation(
  input: JewelryRecommendationInput
): Promise<JewelryRecommendationOutput> {
  return jewelryRecommendationFlow(input);
}

const prompt = ai.definePrompt({
  name: 'jewelryRecommendationPrompt',
  input: {schema: JewelryRecommendationInputSchema},
  output: {schema: JewelryRecommendationOutputSchema},
  prompt: `You are an expert jewelry consultant. A user is browsing a jewelry website and you will provide a personalized jewelry recommendation.

Consider the user's stated preferences, browsing history, color palette, and previously viewed items to generate a recommendation for new items that match their style and complement their existing pieces.

User Preferences: {{{userPreferences}}}
Browsing History: {{{browsingHistory}}}
Color Palette: {{{colorPalette}}}
Previously Viewed Items: {{{previouslyViewedItems}}}

Recommendation:`,
});

const jewelryRecommendationFlow = ai.defineFlow(
  {
    name: 'jewelryRecommendationFlow',
    inputSchema: JewelryRecommendationInputSchema,
    outputSchema: JewelryRecommendationOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
